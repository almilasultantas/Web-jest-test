import { Browser, BrowserContextOptions, Page, LaunchOptions } from 'playwright';
import { NuxtConfig, NuxtOptions } from '@nuxt/types';
import { CancelableRequest, Response } from 'got/dist/source';
import { OptionsOfUnknownResponseBody } from 'got';

declare type ModuleContainerMethod = 'addPlugin' | 'addLayout' | 'addErrorLayout' | 'addServerMiddleware' | 'requireModule';
declare function expectModuleToBeCalledWith(method: ModuleContainerMethod, ...args: any[]): void;
declare function expectModuleNotToBeCalledWith(method: ModuleContainerMethod, ...args: any[]): void;

declare function createBrowser(): Promise<void>;
declare function getBrowser(): Promise<Browser>;
declare function createPage(path?: string, options?: BrowserContextOptions): Promise<Page>;

declare function build(): Promise<void>;

interface NuxtTestOptions {
    testDir: string;
    fixture: string;
    configFile: string;
    rootDir: string;
    buildDir: string;
    config: NuxtConfig;
    build: boolean;
    generate: boolean;
    generateOptions: {
        build: boolean;
        init: boolean;
    };
    setupTimeout: number;
    waitFor: number;
    browser: boolean;
    browserOptions: {
        type: 'chromium' | 'firefox' | 'webkit';
        launch?: LaunchOptions;
    };
    server: boolean;
}
interface NuxtTestContext {
    options: NuxtTestOptions;
    nuxt?: {
        options: NuxtOptions;
        listen: (port?: number) => any;
        ready: () => any;
        close: () => any;
        moduleContainer: any;
    };
    browser?: Browser;
    url?: string;
    builder?: {
        build: () => any;
    };
}
declare function createContext(options: Partial<NuxtTestOptions>): NuxtTestContext;
declare function getContext(): NuxtTestContext;
declare function setContext(context: NuxtTestContext): NuxtTestContext;

declare function generate(): Promise<void>;

declare function loadNuxt(): Promise<void>;
declare function loadFixture(): Promise<void>;
declare function loadNuxtPackage(name?: string): Promise<any>;
declare function getNuxt(): {
    options: NuxtOptions;
    listen: (port?: number) => any;
    ready: () => any;
    close: () => any;
    moduleContainer: any;
};

declare function listen(): Promise<void>;
declare function get(path: string, options?: OptionsOfUnknownResponseBody): CancelableRequest<Response<unknown>>;
declare function url(path: string): string;

declare function setupTest(options: Partial<NuxtTestOptions>): void;
declare function spyOnClass(instance: any): void;

export { NuxtTestContext, NuxtTestOptions, build, createBrowser, createContext, createPage, expectModuleNotToBeCalledWith, expectModuleToBeCalledWith, generate, get, getBrowser, getContext, getNuxt, listen, loadFixture, loadNuxt, loadNuxtPackage, setContext, setupTest, spyOnClass, url };
